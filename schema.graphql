type Account @entity {
  id: String!

  # distance
  multiplier: Int!
  lastDistance: BigInt!
  lastTimestamp: BigInt!

  #
  tokens: [Token!]! @derivedFrom(field: "owner")
  transferFromEvents: [TransferEvent!]! @derivedFrom(field: "from")
  transferToEvents: [TransferEvent!]! @derivedFrom(field: "to")
  bikeStolenFromEvents: [BikeStolenEvent!]! @derivedFrom(field: "from")
  bikeStolenToEvents: [BikeStolenEvent!]! @derivedFrom(field: "to")
}

type Token @entity {
  id: String!
  owner: Account!
  transferEvents: [TransferEvent!]! @derivedFrom(field: "token")
  bikeStolenEvents: [BikeStolenEvent!]! @derivedFrom(field: "token")

  # multiplier
  multiplier: Int!

  # traits
  background: Int
  body: Int
  accessory: Int
  head: Int
  glasses: Int
}

type BikeStolenEvent @entity {
  id: String!
  from: Account!
  to: Account!
  token: Token!
  transactionHash: String!
  timestamp: Int!
}

type TransferEvent @entity {
  id: String!
  from: Account!
  to: Account!
  token: Token!
  transactionHash: String!
  timestamp: Int!
}
